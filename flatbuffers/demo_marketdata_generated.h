// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_DEMOMARKETDATA_BOCHK_GLOBALMARKET_FLATBUFFERS_DEMO_H_
#define FLATBUFFERS_GENERATED_DEMOMARKETDATA_BOCHK_GLOBALMARKET_FLATBUFFERS_DEMO_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 23 &&
              FLATBUFFERS_VERSION_MINOR == 5 &&
              FLATBUFFERS_VERSION_REVISION == 26,
             "Non-compatible flatbuffers version included");

namespace BOCHK {
namespace GlobalMarket {
namespace FlatBuffers {
namespace demo {

struct Header;
struct HeaderBuilder;

struct Message;
struct MessageBuilder;

struct Order;
struct OrderBuilder;

struct OrderResponse;
struct OrderResponseBuilder;

struct MarketDataInformation;
struct MarketDataInformationBuilder;

struct MarketDataEntry;
struct MarketDataEntryBuilder;

struct MarketDataFull;
struct MarketDataFullBuilder;

struct MarketDataBBO;
struct MarketDataBBOBuilder;

struct MarketDataHolder;
struct MarketDataHolderBuilder;

struct SimpleTable;
struct SimpleTableBuilder;

enum OrderType : int8_t {
  OrderType_MarketOrder = 0,
  OrderType_LimitOrder = 1,
  OrderType_FAK = 2,
  OrderType_MIN = OrderType_MarketOrder,
  OrderType_MAX = OrderType_FAK
};

inline const OrderType (&EnumValuesOrderType())[3] {
  static const OrderType values[] = {
    OrderType_MarketOrder,
    OrderType_LimitOrder,
    OrderType_FAK
  };
  return values;
}

inline const char * const *EnumNamesOrderType() {
  static const char * const names[4] = {
    "MarketOrder",
    "LimitOrder",
    "FAK",
    nullptr
  };
  return names;
}

inline const char *EnumNameOrderType(OrderType e) {
  if (::flatbuffers::IsOutRange(e, OrderType_MarketOrder, OrderType_FAK)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesOrderType()[index];
}

enum OrderSide : int8_t {
  OrderSide_Buy = 0,
  OrderSide_Sell = 1,
  OrderSide_MIN = OrderSide_Buy,
  OrderSide_MAX = OrderSide_Sell
};

inline const OrderSide (&EnumValuesOrderSide())[2] {
  static const OrderSide values[] = {
    OrderSide_Buy,
    OrderSide_Sell
  };
  return values;
}

inline const char * const *EnumNamesOrderSide() {
  static const char * const names[3] = {
    "Buy",
    "Sell",
    nullptr
  };
  return names;
}

inline const char *EnumNameOrderSide(OrderSide e) {
  if (::flatbuffers::IsOutRange(e, OrderSide_Buy, OrderSide_Sell)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesOrderSide()[index];
}

enum OrderStatus : int8_t {
  OrderStatus_NEW = 0,
  OrderStatus_CLOSED = 1,
  OrderStatus_MIN = OrderStatus_NEW,
  OrderStatus_MAX = OrderStatus_CLOSED
};

inline const OrderStatus (&EnumValuesOrderStatus())[2] {
  static const OrderStatus values[] = {
    OrderStatus_NEW,
    OrderStatus_CLOSED
  };
  return values;
}

inline const char * const *EnumNamesOrderStatus() {
  static const char * const names[3] = {
    "NEW",
    "CLOSED",
    nullptr
  };
  return names;
}

inline const char *EnumNameOrderStatus(OrderStatus e) {
  if (::flatbuffers::IsOutRange(e, OrderStatus_NEW, OrderStatus_CLOSED)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesOrderStatus()[index];
}

enum MarketDataType : int8_t {
  MarketDataType_BBO = 0,
  MarketDataType_FULL = 1,
  MarketDataType_MIN = MarketDataType_BBO,
  MarketDataType_MAX = MarketDataType_FULL
};

inline const MarketDataType (&EnumValuesMarketDataType())[2] {
  static const MarketDataType values[] = {
    MarketDataType_BBO,
    MarketDataType_FULL
  };
  return values;
}

inline const char * const *EnumNamesMarketDataType() {
  static const char * const names[3] = {
    "BBO",
    "FULL",
    nullptr
  };
  return names;
}

inline const char *EnumNameMarketDataType(MarketDataType e) {
  if (::flatbuffers::IsOutRange(e, MarketDataType_BBO, MarketDataType_FULL)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesMarketDataType()[index];
}

enum MarketData : uint8_t {
  MarketData_NONE = 0,
  MarketData_MarketDataFull = 1,
  MarketData_MarketDataBBO = 2,
  MarketData_MIN = MarketData_NONE,
  MarketData_MAX = MarketData_MarketDataBBO
};

inline const MarketData (&EnumValuesMarketData())[3] {
  static const MarketData values[] = {
    MarketData_NONE,
    MarketData_MarketDataFull,
    MarketData_MarketDataBBO
  };
  return values;
}

inline const char * const *EnumNamesMarketData() {
  static const char * const names[4] = {
    "NONE",
    "MarketDataFull",
    "MarketDataBBO",
    nullptr
  };
  return names;
}

inline const char *EnumNameMarketData(MarketData e) {
  if (::flatbuffers::IsOutRange(e, MarketData_NONE, MarketData_MarketDataBBO)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesMarketData()[index];
}

template<typename T> struct MarketDataTraits {
  static const MarketData enum_value = MarketData_NONE;
};

template<> struct MarketDataTraits<BOCHK::GlobalMarket::FlatBuffers::demo::MarketDataFull> {
  static const MarketData enum_value = MarketData_MarketDataFull;
};

template<> struct MarketDataTraits<BOCHK::GlobalMarket::FlatBuffers::demo::MarketDataBBO> {
  static const MarketData enum_value = MarketData_MarketDataBBO;
};

bool VerifyMarketData(::flatbuffers::Verifier &verifier, const void *obj, MarketData type);
bool VerifyMarketDataVector(::flatbuffers::Verifier &verifier, const ::flatbuffers::Vector<::flatbuffers::Offset<void>> *values, const ::flatbuffers::Vector<uint8_t> *types);

struct Header FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef HeaderBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_FROM = 4,
    VT_TO = 6,
    VT_SEQ = 8
  };
  const ::flatbuffers::String *from() const {
    return GetPointer<const ::flatbuffers::String *>(VT_FROM);
  }
  const ::flatbuffers::String *to() const {
    return GetPointer<const ::flatbuffers::String *>(VT_TO);
  }
  int64_t seq() const {
    return GetField<int64_t>(VT_SEQ, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_FROM) &&
           verifier.VerifyString(from()) &&
           VerifyOffset(verifier, VT_TO) &&
           verifier.VerifyString(to()) &&
           VerifyField<int64_t>(verifier, VT_SEQ, 8) &&
           verifier.EndTable();
  }
};

struct HeaderBuilder {
  typedef Header Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_from(::flatbuffers::Offset<::flatbuffers::String> from) {
    fbb_.AddOffset(Header::VT_FROM, from);
  }
  void add_to(::flatbuffers::Offset<::flatbuffers::String> to) {
    fbb_.AddOffset(Header::VT_TO, to);
  }
  void add_seq(int64_t seq) {
    fbb_.AddElement<int64_t>(Header::VT_SEQ, seq, 0);
  }
  explicit HeaderBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Header> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Header>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Header> CreateHeader(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> from = 0,
    ::flatbuffers::Offset<::flatbuffers::String> to = 0,
    int64_t seq = 0) {
  HeaderBuilder builder_(_fbb);
  builder_.add_seq(seq);
  builder_.add_to(to);
  builder_.add_from(from);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Header> CreateHeaderDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *from = nullptr,
    const char *to = nullptr,
    int64_t seq = 0) {
  auto from__ = from ? _fbb.CreateString(from) : 0;
  auto to__ = to ? _fbb.CreateString(to) : 0;
  return BOCHK::GlobalMarket::FlatBuffers::demo::CreateHeader(
      _fbb,
      from__,
      to__,
      seq);
}

struct Message FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef MessageBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_HEADER = 4,
    VT_FREETEXT = 6,
    VT_FREENUMBER = 8
  };
  const BOCHK::GlobalMarket::FlatBuffers::demo::Header *header() const {
    return GetPointer<const BOCHK::GlobalMarket::FlatBuffers::demo::Header *>(VT_HEADER);
  }
  const ::flatbuffers::String *freetext() const {
    return GetPointer<const ::flatbuffers::String *>(VT_FREETEXT);
  }
  double freenumber() const {
    return GetField<double>(VT_FREENUMBER, 0.0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_HEADER) &&
           verifier.VerifyTable(header()) &&
           VerifyOffset(verifier, VT_FREETEXT) &&
           verifier.VerifyString(freetext()) &&
           VerifyField<double>(verifier, VT_FREENUMBER, 8) &&
           verifier.EndTable();
  }
};

struct MessageBuilder {
  typedef Message Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_header(::flatbuffers::Offset<BOCHK::GlobalMarket::FlatBuffers::demo::Header> header) {
    fbb_.AddOffset(Message::VT_HEADER, header);
  }
  void add_freetext(::flatbuffers::Offset<::flatbuffers::String> freetext) {
    fbb_.AddOffset(Message::VT_FREETEXT, freetext);
  }
  void add_freenumber(double freenumber) {
    fbb_.AddElement<double>(Message::VT_FREENUMBER, freenumber, 0.0);
  }
  explicit MessageBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Message> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Message>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Message> CreateMessage(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<BOCHK::GlobalMarket::FlatBuffers::demo::Header> header = 0,
    ::flatbuffers::Offset<::flatbuffers::String> freetext = 0,
    double freenumber = 0.0) {
  MessageBuilder builder_(_fbb);
  builder_.add_freenumber(freenumber);
  builder_.add_freetext(freetext);
  builder_.add_header(header);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Message> CreateMessageDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<BOCHK::GlobalMarket::FlatBuffers::demo::Header> header = 0,
    const char *freetext = nullptr,
    double freenumber = 0.0) {
  auto freetext__ = freetext ? _fbb.CreateString(freetext) : 0;
  return BOCHK::GlobalMarket::FlatBuffers::demo::CreateMessage(
      _fbb,
      header,
      freetext__,
      freenumber);
}

struct Order FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef OrderBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_HEADER = 4,
    VT_ORDER_ID = 6,
    VT_INSTRUMENT = 8,
    VT_SIDE = 10,
    VT_SIZE = 12,
    VT_PRICE = 14,
    VT_ORDER_TYPE = 16
  };
  const BOCHK::GlobalMarket::FlatBuffers::demo::Header *header() const {
    return GetPointer<const BOCHK::GlobalMarket::FlatBuffers::demo::Header *>(VT_HEADER);
  }
  const ::flatbuffers::String *order_id() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ORDER_ID);
  }
  const ::flatbuffers::String *instrument() const {
    return GetPointer<const ::flatbuffers::String *>(VT_INSTRUMENT);
  }
  BOCHK::GlobalMarket::FlatBuffers::demo::OrderSide side() const {
    return static_cast<BOCHK::GlobalMarket::FlatBuffers::demo::OrderSide>(GetField<int8_t>(VT_SIDE, 0));
  }
  double size() const {
    return GetField<double>(VT_SIZE, 0.0);
  }
  double price() const {
    return GetField<double>(VT_PRICE, 0.0);
  }
  BOCHK::GlobalMarket::FlatBuffers::demo::OrderType order_type() const {
    return static_cast<BOCHK::GlobalMarket::FlatBuffers::demo::OrderType>(GetField<int8_t>(VT_ORDER_TYPE, 1));
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_HEADER) &&
           verifier.VerifyTable(header()) &&
           VerifyOffset(verifier, VT_ORDER_ID) &&
           verifier.VerifyString(order_id()) &&
           VerifyOffset(verifier, VT_INSTRUMENT) &&
           verifier.VerifyString(instrument()) &&
           VerifyField<int8_t>(verifier, VT_SIDE, 1) &&
           VerifyField<double>(verifier, VT_SIZE, 8) &&
           VerifyField<double>(verifier, VT_PRICE, 8) &&
           VerifyField<int8_t>(verifier, VT_ORDER_TYPE, 1) &&
           verifier.EndTable();
  }
};

struct OrderBuilder {
  typedef Order Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_header(::flatbuffers::Offset<BOCHK::GlobalMarket::FlatBuffers::demo::Header> header) {
    fbb_.AddOffset(Order::VT_HEADER, header);
  }
  void add_order_id(::flatbuffers::Offset<::flatbuffers::String> order_id) {
    fbb_.AddOffset(Order::VT_ORDER_ID, order_id);
  }
  void add_instrument(::flatbuffers::Offset<::flatbuffers::String> instrument) {
    fbb_.AddOffset(Order::VT_INSTRUMENT, instrument);
  }
  void add_side(BOCHK::GlobalMarket::FlatBuffers::demo::OrderSide side) {
    fbb_.AddElement<int8_t>(Order::VT_SIDE, static_cast<int8_t>(side), 0);
  }
  void add_size(double size) {
    fbb_.AddElement<double>(Order::VT_SIZE, size, 0.0);
  }
  void add_price(double price) {
    fbb_.AddElement<double>(Order::VT_PRICE, price, 0.0);
  }
  void add_order_type(BOCHK::GlobalMarket::FlatBuffers::demo::OrderType order_type) {
    fbb_.AddElement<int8_t>(Order::VT_ORDER_TYPE, static_cast<int8_t>(order_type), 1);
  }
  explicit OrderBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Order> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Order>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Order> CreateOrder(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<BOCHK::GlobalMarket::FlatBuffers::demo::Header> header = 0,
    ::flatbuffers::Offset<::flatbuffers::String> order_id = 0,
    ::flatbuffers::Offset<::flatbuffers::String> instrument = 0,
    BOCHK::GlobalMarket::FlatBuffers::demo::OrderSide side = BOCHK::GlobalMarket::FlatBuffers::demo::OrderSide_Buy,
    double size = 0.0,
    double price = 0.0,
    BOCHK::GlobalMarket::FlatBuffers::demo::OrderType order_type = BOCHK::GlobalMarket::FlatBuffers::demo::OrderType_LimitOrder) {
  OrderBuilder builder_(_fbb);
  builder_.add_price(price);
  builder_.add_size(size);
  builder_.add_instrument(instrument);
  builder_.add_order_id(order_id);
  builder_.add_header(header);
  builder_.add_order_type(order_type);
  builder_.add_side(side);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Order> CreateOrderDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<BOCHK::GlobalMarket::FlatBuffers::demo::Header> header = 0,
    const char *order_id = nullptr,
    const char *instrument = nullptr,
    BOCHK::GlobalMarket::FlatBuffers::demo::OrderSide side = BOCHK::GlobalMarket::FlatBuffers::demo::OrderSide_Buy,
    double size = 0.0,
    double price = 0.0,
    BOCHK::GlobalMarket::FlatBuffers::demo::OrderType order_type = BOCHK::GlobalMarket::FlatBuffers::demo::OrderType_LimitOrder) {
  auto order_id__ = order_id ? _fbb.CreateString(order_id) : 0;
  auto instrument__ = instrument ? _fbb.CreateString(instrument) : 0;
  return BOCHK::GlobalMarket::FlatBuffers::demo::CreateOrder(
      _fbb,
      header,
      order_id__,
      instrument__,
      side,
      size,
      price,
      order_type);
}

struct OrderResponse FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef OrderResponseBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_HEADER = 4,
    VT_ORDER_ID = 6,
    VT_STATUS = 8
  };
  const BOCHK::GlobalMarket::FlatBuffers::demo::Header *header() const {
    return GetPointer<const BOCHK::GlobalMarket::FlatBuffers::demo::Header *>(VT_HEADER);
  }
  const ::flatbuffers::String *order_id() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ORDER_ID);
  }
  BOCHK::GlobalMarket::FlatBuffers::demo::OrderStatus status() const {
    return static_cast<BOCHK::GlobalMarket::FlatBuffers::demo::OrderStatus>(GetField<int8_t>(VT_STATUS, 0));
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_HEADER) &&
           verifier.VerifyTable(header()) &&
           VerifyOffset(verifier, VT_ORDER_ID) &&
           verifier.VerifyString(order_id()) &&
           VerifyField<int8_t>(verifier, VT_STATUS, 1) &&
           verifier.EndTable();
  }
};

struct OrderResponseBuilder {
  typedef OrderResponse Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_header(::flatbuffers::Offset<BOCHK::GlobalMarket::FlatBuffers::demo::Header> header) {
    fbb_.AddOffset(OrderResponse::VT_HEADER, header);
  }
  void add_order_id(::flatbuffers::Offset<::flatbuffers::String> order_id) {
    fbb_.AddOffset(OrderResponse::VT_ORDER_ID, order_id);
  }
  void add_status(BOCHK::GlobalMarket::FlatBuffers::demo::OrderStatus status) {
    fbb_.AddElement<int8_t>(OrderResponse::VT_STATUS, static_cast<int8_t>(status), 0);
  }
  explicit OrderResponseBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<OrderResponse> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<OrderResponse>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<OrderResponse> CreateOrderResponse(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<BOCHK::GlobalMarket::FlatBuffers::demo::Header> header = 0,
    ::flatbuffers::Offset<::flatbuffers::String> order_id = 0,
    BOCHK::GlobalMarket::FlatBuffers::demo::OrderStatus status = BOCHK::GlobalMarket::FlatBuffers::demo::OrderStatus_NEW) {
  OrderResponseBuilder builder_(_fbb);
  builder_.add_order_id(order_id);
  builder_.add_header(header);
  builder_.add_status(status);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<OrderResponse> CreateOrderResponseDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<BOCHK::GlobalMarket::FlatBuffers::demo::Header> header = 0,
    const char *order_id = nullptr,
    BOCHK::GlobalMarket::FlatBuffers::demo::OrderStatus status = BOCHK::GlobalMarket::FlatBuffers::demo::OrderStatus_NEW) {
  auto order_id__ = order_id ? _fbb.CreateString(order_id) : 0;
  return BOCHK::GlobalMarket::FlatBuffers::demo::CreateOrderResponse(
      _fbb,
      header,
      order_id__,
      status);
}

struct MarketDataInformation FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef MarketDataInformationBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_INSTRUMENT = 4,
    VT_INSRUMENT_NAME = 6,
    VT_OPEN = 8,
    VT_HIGH = 10,
    VT_LOW = 12,
    VT_CLOSE = 14,
    VT_TURNOVER = 16,
    VT_TRADED_VOLUME = 18
  };
  const ::flatbuffers::String *instrument() const {
    return GetPointer<const ::flatbuffers::String *>(VT_INSTRUMENT);
  }
  const ::flatbuffers::String *insrument_name() const {
    return GetPointer<const ::flatbuffers::String *>(VT_INSRUMENT_NAME);
  }
  double open() const {
    return GetField<double>(VT_OPEN, 0.0);
  }
  double high() const {
    return GetField<double>(VT_HIGH, 0.0);
  }
  double low() const {
    return GetField<double>(VT_LOW, 0.0);
  }
  double close() const {
    return GetField<double>(VT_CLOSE, 0.0);
  }
  double turnover() const {
    return GetField<double>(VT_TURNOVER, 0.0);
  }
  double traded_volume() const {
    return GetField<double>(VT_TRADED_VOLUME, 0.0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_INSTRUMENT) &&
           verifier.VerifyString(instrument()) &&
           VerifyOffset(verifier, VT_INSRUMENT_NAME) &&
           verifier.VerifyString(insrument_name()) &&
           VerifyField<double>(verifier, VT_OPEN, 8) &&
           VerifyField<double>(verifier, VT_HIGH, 8) &&
           VerifyField<double>(verifier, VT_LOW, 8) &&
           VerifyField<double>(verifier, VT_CLOSE, 8) &&
           VerifyField<double>(verifier, VT_TURNOVER, 8) &&
           VerifyField<double>(verifier, VT_TRADED_VOLUME, 8) &&
           verifier.EndTable();
  }
};

struct MarketDataInformationBuilder {
  typedef MarketDataInformation Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_instrument(::flatbuffers::Offset<::flatbuffers::String> instrument) {
    fbb_.AddOffset(MarketDataInformation::VT_INSTRUMENT, instrument);
  }
  void add_insrument_name(::flatbuffers::Offset<::flatbuffers::String> insrument_name) {
    fbb_.AddOffset(MarketDataInformation::VT_INSRUMENT_NAME, insrument_name);
  }
  void add_open(double open) {
    fbb_.AddElement<double>(MarketDataInformation::VT_OPEN, open, 0.0);
  }
  void add_high(double high) {
    fbb_.AddElement<double>(MarketDataInformation::VT_HIGH, high, 0.0);
  }
  void add_low(double low) {
    fbb_.AddElement<double>(MarketDataInformation::VT_LOW, low, 0.0);
  }
  void add_close(double close) {
    fbb_.AddElement<double>(MarketDataInformation::VT_CLOSE, close, 0.0);
  }
  void add_turnover(double turnover) {
    fbb_.AddElement<double>(MarketDataInformation::VT_TURNOVER, turnover, 0.0);
  }
  void add_traded_volume(double traded_volume) {
    fbb_.AddElement<double>(MarketDataInformation::VT_TRADED_VOLUME, traded_volume, 0.0);
  }
  explicit MarketDataInformationBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<MarketDataInformation> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<MarketDataInformation>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<MarketDataInformation> CreateMarketDataInformation(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> instrument = 0,
    ::flatbuffers::Offset<::flatbuffers::String> insrument_name = 0,
    double open = 0.0,
    double high = 0.0,
    double low = 0.0,
    double close = 0.0,
    double turnover = 0.0,
    double traded_volume = 0.0) {
  MarketDataInformationBuilder builder_(_fbb);
  builder_.add_traded_volume(traded_volume);
  builder_.add_turnover(turnover);
  builder_.add_close(close);
  builder_.add_low(low);
  builder_.add_high(high);
  builder_.add_open(open);
  builder_.add_insrument_name(insrument_name);
  builder_.add_instrument(instrument);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<MarketDataInformation> CreateMarketDataInformationDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *instrument = nullptr,
    const char *insrument_name = nullptr,
    double open = 0.0,
    double high = 0.0,
    double low = 0.0,
    double close = 0.0,
    double turnover = 0.0,
    double traded_volume = 0.0) {
  auto instrument__ = instrument ? _fbb.CreateString(instrument) : 0;
  auto insrument_name__ = insrument_name ? _fbb.CreateString(insrument_name) : 0;
  return BOCHK::GlobalMarket::FlatBuffers::demo::CreateMarketDataInformation(
      _fbb,
      instrument__,
      insrument_name__,
      open,
      high,
      low,
      close,
      turnover,
      traded_volume);
}

struct MarketDataEntry FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef MarketDataEntryBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_BID = 4,
    VT_BID_QTY = 6,
    VT_ASK = 8,
    VT_ASK_QTY = 10
  };
  double bid() const {
    return GetField<double>(VT_BID, 0.0);
  }
  double bid_qty() const {
    return GetField<double>(VT_BID_QTY, 0.0);
  }
  double ask() const {
    return GetField<double>(VT_ASK, 0.0);
  }
  double ask_qty() const {
    return GetField<double>(VT_ASK_QTY, 0.0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<double>(verifier, VT_BID, 8) &&
           VerifyField<double>(verifier, VT_BID_QTY, 8) &&
           VerifyField<double>(verifier, VT_ASK, 8) &&
           VerifyField<double>(verifier, VT_ASK_QTY, 8) &&
           verifier.EndTable();
  }
};

struct MarketDataEntryBuilder {
  typedef MarketDataEntry Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_bid(double bid) {
    fbb_.AddElement<double>(MarketDataEntry::VT_BID, bid, 0.0);
  }
  void add_bid_qty(double bid_qty) {
    fbb_.AddElement<double>(MarketDataEntry::VT_BID_QTY, bid_qty, 0.0);
  }
  void add_ask(double ask) {
    fbb_.AddElement<double>(MarketDataEntry::VT_ASK, ask, 0.0);
  }
  void add_ask_qty(double ask_qty) {
    fbb_.AddElement<double>(MarketDataEntry::VT_ASK_QTY, ask_qty, 0.0);
  }
  explicit MarketDataEntryBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<MarketDataEntry> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<MarketDataEntry>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<MarketDataEntry> CreateMarketDataEntry(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    double bid = 0.0,
    double bid_qty = 0.0,
    double ask = 0.0,
    double ask_qty = 0.0) {
  MarketDataEntryBuilder builder_(_fbb);
  builder_.add_ask_qty(ask_qty);
  builder_.add_ask(ask);
  builder_.add_bid_qty(bid_qty);
  builder_.add_bid(bid);
  return builder_.Finish();
}

struct MarketDataFull FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef MarketDataFullBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_MDI = 4,
    VT_MD = 6
  };
  const BOCHK::GlobalMarket::FlatBuffers::demo::MarketDataInformation *mdi() const {
    return GetPointer<const BOCHK::GlobalMarket::FlatBuffers::demo::MarketDataInformation *>(VT_MDI);
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<BOCHK::GlobalMarket::FlatBuffers::demo::MarketDataEntry>> *md() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<BOCHK::GlobalMarket::FlatBuffers::demo::MarketDataEntry>> *>(VT_MD);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_MDI) &&
           verifier.VerifyTable(mdi()) &&
           VerifyOffset(verifier, VT_MD) &&
           verifier.VerifyVector(md()) &&
           verifier.VerifyVectorOfTables(md()) &&
           verifier.EndTable();
  }
};

struct MarketDataFullBuilder {
  typedef MarketDataFull Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_mdi(::flatbuffers::Offset<BOCHK::GlobalMarket::FlatBuffers::demo::MarketDataInformation> mdi) {
    fbb_.AddOffset(MarketDataFull::VT_MDI, mdi);
  }
  void add_md(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<BOCHK::GlobalMarket::FlatBuffers::demo::MarketDataEntry>>> md) {
    fbb_.AddOffset(MarketDataFull::VT_MD, md);
  }
  explicit MarketDataFullBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<MarketDataFull> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<MarketDataFull>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<MarketDataFull> CreateMarketDataFull(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<BOCHK::GlobalMarket::FlatBuffers::demo::MarketDataInformation> mdi = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<BOCHK::GlobalMarket::FlatBuffers::demo::MarketDataEntry>>> md = 0) {
  MarketDataFullBuilder builder_(_fbb);
  builder_.add_md(md);
  builder_.add_mdi(mdi);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<MarketDataFull> CreateMarketDataFullDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<BOCHK::GlobalMarket::FlatBuffers::demo::MarketDataInformation> mdi = 0,
    const std::vector<::flatbuffers::Offset<BOCHK::GlobalMarket::FlatBuffers::demo::MarketDataEntry>> *md = nullptr) {
  auto md__ = md ? _fbb.CreateVector<::flatbuffers::Offset<BOCHK::GlobalMarket::FlatBuffers::demo::MarketDataEntry>>(*md) : 0;
  return BOCHK::GlobalMarket::FlatBuffers::demo::CreateMarketDataFull(
      _fbb,
      mdi,
      md__);
}

struct MarketDataBBO FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef MarketDataBBOBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_INSTRUMENT = 4,
    VT_MD = 6
  };
  const ::flatbuffers::String *instrument() const {
    return GetPointer<const ::flatbuffers::String *>(VT_INSTRUMENT);
  }
  const BOCHK::GlobalMarket::FlatBuffers::demo::MarketDataEntry *md() const {
    return GetPointer<const BOCHK::GlobalMarket::FlatBuffers::demo::MarketDataEntry *>(VT_MD);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_INSTRUMENT) &&
           verifier.VerifyString(instrument()) &&
           VerifyOffset(verifier, VT_MD) &&
           verifier.VerifyTable(md()) &&
           verifier.EndTable();
  }
};

struct MarketDataBBOBuilder {
  typedef MarketDataBBO Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_instrument(::flatbuffers::Offset<::flatbuffers::String> instrument) {
    fbb_.AddOffset(MarketDataBBO::VT_INSTRUMENT, instrument);
  }
  void add_md(::flatbuffers::Offset<BOCHK::GlobalMarket::FlatBuffers::demo::MarketDataEntry> md) {
    fbb_.AddOffset(MarketDataBBO::VT_MD, md);
  }
  explicit MarketDataBBOBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<MarketDataBBO> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<MarketDataBBO>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<MarketDataBBO> CreateMarketDataBBO(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> instrument = 0,
    ::flatbuffers::Offset<BOCHK::GlobalMarket::FlatBuffers::demo::MarketDataEntry> md = 0) {
  MarketDataBBOBuilder builder_(_fbb);
  builder_.add_md(md);
  builder_.add_instrument(instrument);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<MarketDataBBO> CreateMarketDataBBODirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *instrument = nullptr,
    ::flatbuffers::Offset<BOCHK::GlobalMarket::FlatBuffers::demo::MarketDataEntry> md = 0) {
  auto instrument__ = instrument ? _fbb.CreateString(instrument) : 0;
  return BOCHK::GlobalMarket::FlatBuffers::demo::CreateMarketDataBBO(
      _fbb,
      instrument__,
      md);
}

struct MarketDataHolder FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef MarketDataHolderBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_MD_TYPE = 4,
    VT_MD = 6
  };
  BOCHK::GlobalMarket::FlatBuffers::demo::MarketData md_type() const {
    return static_cast<BOCHK::GlobalMarket::FlatBuffers::demo::MarketData>(GetField<uint8_t>(VT_MD_TYPE, 0));
  }
  const void *md() const {
    return GetPointer<const void *>(VT_MD);
  }
  template<typename T> const T *md_as() const;
  const BOCHK::GlobalMarket::FlatBuffers::demo::MarketDataFull *md_as_MarketDataFull() const {
    return md_type() == BOCHK::GlobalMarket::FlatBuffers::demo::MarketData_MarketDataFull ? static_cast<const BOCHK::GlobalMarket::FlatBuffers::demo::MarketDataFull *>(md()) : nullptr;
  }
  const BOCHK::GlobalMarket::FlatBuffers::demo::MarketDataBBO *md_as_MarketDataBBO() const {
    return md_type() == BOCHK::GlobalMarket::FlatBuffers::demo::MarketData_MarketDataBBO ? static_cast<const BOCHK::GlobalMarket::FlatBuffers::demo::MarketDataBBO *>(md()) : nullptr;
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_MD_TYPE, 1) &&
           VerifyOffset(verifier, VT_MD) &&
           VerifyMarketData(verifier, md(), md_type()) &&
           verifier.EndTable();
  }
};

template<> inline const BOCHK::GlobalMarket::FlatBuffers::demo::MarketDataFull *MarketDataHolder::md_as<BOCHK::GlobalMarket::FlatBuffers::demo::MarketDataFull>() const {
  return md_as_MarketDataFull();
}

template<> inline const BOCHK::GlobalMarket::FlatBuffers::demo::MarketDataBBO *MarketDataHolder::md_as<BOCHK::GlobalMarket::FlatBuffers::demo::MarketDataBBO>() const {
  return md_as_MarketDataBBO();
}

struct MarketDataHolderBuilder {
  typedef MarketDataHolder Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_md_type(BOCHK::GlobalMarket::FlatBuffers::demo::MarketData md_type) {
    fbb_.AddElement<uint8_t>(MarketDataHolder::VT_MD_TYPE, static_cast<uint8_t>(md_type), 0);
  }
  void add_md(::flatbuffers::Offset<void> md) {
    fbb_.AddOffset(MarketDataHolder::VT_MD, md);
  }
  explicit MarketDataHolderBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<MarketDataHolder> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<MarketDataHolder>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<MarketDataHolder> CreateMarketDataHolder(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    BOCHK::GlobalMarket::FlatBuffers::demo::MarketData md_type = BOCHK::GlobalMarket::FlatBuffers::demo::MarketData_NONE,
    ::flatbuffers::Offset<void> md = 0) {
  MarketDataHolderBuilder builder_(_fbb);
  builder_.add_md(md);
  builder_.add_md_type(md_type);
  return builder_.Finish();
}

struct SimpleTable FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef SimpleTableBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NAME = 4,
    VT_AGE = 6,
    VT_WEIGHT = 8
  };
  const ::flatbuffers::String *name() const {
    return GetPointer<const ::flatbuffers::String *>(VT_NAME);
  }
  int64_t age() const {
    return GetField<int64_t>(VT_AGE, 0);
  }
  double weight() const {
    return GetField<double>(VT_WEIGHT, 0.0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyField<int64_t>(verifier, VT_AGE, 8) &&
           VerifyField<double>(verifier, VT_WEIGHT, 8) &&
           verifier.EndTable();
  }
};

struct SimpleTableBuilder {
  typedef SimpleTable Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_name(::flatbuffers::Offset<::flatbuffers::String> name) {
    fbb_.AddOffset(SimpleTable::VT_NAME, name);
  }
  void add_age(int64_t age) {
    fbb_.AddElement<int64_t>(SimpleTable::VT_AGE, age, 0);
  }
  void add_weight(double weight) {
    fbb_.AddElement<double>(SimpleTable::VT_WEIGHT, weight, 0.0);
  }
  explicit SimpleTableBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<SimpleTable> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<SimpleTable>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<SimpleTable> CreateSimpleTable(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> name = 0,
    int64_t age = 0,
    double weight = 0.0) {
  SimpleTableBuilder builder_(_fbb);
  builder_.add_weight(weight);
  builder_.add_age(age);
  builder_.add_name(name);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<SimpleTable> CreateSimpleTableDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *name = nullptr,
    int64_t age = 0,
    double weight = 0.0) {
  auto name__ = name ? _fbb.CreateString(name) : 0;
  return BOCHK::GlobalMarket::FlatBuffers::demo::CreateSimpleTable(
      _fbb,
      name__,
      age,
      weight);
}

inline bool VerifyMarketData(::flatbuffers::Verifier &verifier, const void *obj, MarketData type) {
  switch (type) {
    case MarketData_NONE: {
      return true;
    }
    case MarketData_MarketDataFull: {
      auto ptr = reinterpret_cast<const BOCHK::GlobalMarket::FlatBuffers::demo::MarketDataFull *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case MarketData_MarketDataBBO: {
      auto ptr = reinterpret_cast<const BOCHK::GlobalMarket::FlatBuffers::demo::MarketDataBBO *>(obj);
      return verifier.VerifyTable(ptr);
    }
    default: return true;
  }
}

inline bool VerifyMarketDataVector(::flatbuffers::Verifier &verifier, const ::flatbuffers::Vector<::flatbuffers::Offset<void>> *values, const ::flatbuffers::Vector<uint8_t> *types) {
  if (!values || !types) return !values && !types;
  if (values->size() != types->size()) return false;
  for (::flatbuffers::uoffset_t i = 0; i < values->size(); ++i) {
    if (!VerifyMarketData(
        verifier,  values->Get(i), types->GetEnum<MarketData>(i))) {
      return false;
    }
  }
  return true;
}

inline const BOCHK::GlobalMarket::FlatBuffers::demo::Message *GetMessage(const void *buf) {
  return ::flatbuffers::GetRoot<BOCHK::GlobalMarket::FlatBuffers::demo::Message>(buf);
}

inline const BOCHK::GlobalMarket::FlatBuffers::demo::Message *GetSizePrefixedMessage(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<BOCHK::GlobalMarket::FlatBuffers::demo::Message>(buf);
}

inline bool VerifyMessageBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<BOCHK::GlobalMarket::FlatBuffers::demo::Message>(nullptr);
}

inline bool VerifySizePrefixedMessageBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<BOCHK::GlobalMarket::FlatBuffers::demo::Message>(nullptr);
}

inline void FinishMessageBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<BOCHK::GlobalMarket::FlatBuffers::demo::Message> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedMessageBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<BOCHK::GlobalMarket::FlatBuffers::demo::Message> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace demo
}  // namespace FlatBuffers
}  // namespace GlobalMarket
}  // namespace BOCHK

#endif  // FLATBUFFERS_GENERATED_DEMOMARKETDATA_BOCHK_GLOBALMARKET_FLATBUFFERS_DEMO_H_
